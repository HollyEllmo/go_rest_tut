#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
# Usage: ./scripts/restore_testdata.sh [backup_file.sql]

set -e  # Exit on any error

BACKUP_FILE=""
DOCKER_CONTAINER="go_rest_tut_mysql"
DB_NAME="ecom"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
print_info() {
    echo -e "\033[34m[INFO]\033[0m $1"
}

print_success() {
    echo -e "\033[32m[SUCCESS]\033[0m $1"
}

print_error() {
    echo -e "\033[31m[ERROR]\033[0m $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
if [ $# -eq 0 ]; then
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø
    BACKUP_FILE=$(ls -t backups/ecom_testdata_*.sql 2>/dev/null | head -n1)
    if [ -z "$BACKUP_FILE" ]; then
        print_error "No backup files found in backups/ directory"
        echo "Usage: $0 [backup_file.sql]"
        exit 1
    fi
    print_info "Using latest backup: $BACKUP_FILE"
else
    BACKUP_FILE="$1"
    if [ ! -f "$BACKUP_FILE" ]; then
        print_error "Backup file '$BACKUP_FILE' not found"
        exit 1
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
if ! docker ps | grep -q "$DOCKER_CONTAINER"; then
    print_error "Docker container '$DOCKER_CONTAINER' is not running"
    print_info "Please start it with: docker-compose up -d"
    exit 1
fi

print_info "üîÑ Starting database restoration..."

# 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ)
print_info "Checking if application is running..."
if lsof -i :8080 >/dev/null 2>&1; then
    print_info "‚ö†Ô∏è  Application is running on port 8080. Please stop it first."
    echo "You can stop it with Ctrl+C if running in terminal"
    read -p "Press Enter when application is stopped..."
fi

# 2. –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
print_info "üóëÔ∏è  Dropping existing database..."
docker exec "$DOCKER_CONTAINER" mysql -u root -ppassword -e "DROP DATABASE IF EXISTS $DB_NAME;" 2>/dev/null

# 3. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
print_info "üèóÔ∏è  Creating new database..."
docker exec "$DOCKER_CONTAINER" mysql -u root -ppassword -e "CREATE DATABASE $DB_NAME;" 2>/dev/null

# 4. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–∞–ø–∞
print_info "üì• Restoring data from backup..."
docker exec -i "$DOCKER_CONTAINER" mysql -u root -ppassword "$DB_NAME" < "$BACKUP_FILE"

# 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
print_info "‚úÖ Verifying restoration..."
TABLES_COUNT=$(docker exec "$DOCKER_CONTAINER" mysql -u root -ppassword -e "USE $DB_NAME; SHOW TABLES;" 2>/dev/null | wc -l)
USERS_COUNT=$(docker exec "$DOCKER_CONTAINER" mysql -u root -ppassword -e "USE $DB_NAME; SELECT COUNT(*) FROM users;" 2>/dev/null | tail -n1)
PRODUCTS_COUNT=$(docker exec "$DOCKER_CONTAINER" mysql -u root -ppassword -e "USE $DB_NAME; SELECT COUNT(*) FROM products;" 2>/dev/null | tail -n1)
MOVEMENTS_COUNT=$(docker exec "$DOCKER_CONTAINER" mysql -u root -ppassword -e "USE $DB_NAME; SELECT COUNT(*) FROM inventory_movements;" 2>/dev/null | tail -n1)

print_success "üéâ Database restoration completed!"
print_success "üìä Restored data summary:"
echo "   ‚Ä¢ Tables: $((TABLES_COUNT-1))"
echo "   ‚Ä¢ Users: $USERS_COUNT"
echo "   ‚Ä¢ Products: $PRODUCTS_COUNT"
echo "   ‚Ä¢ Inventory movements: $MOVEMENTS_COUNT"
echo ""
print_success "‚úÖ You can now start your application with: make run"